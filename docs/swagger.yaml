basePath: /
definitions:
  presenter.BaseEmptyResponse:
    properties:
      data:
        $ref: '#/definitions/presenter.EmptyResponse'
      message:
        type: string
    type: object
  presenter.BaseFriendListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.FriendResponse'
        type: array
      message:
        type: string
    type: object
  presenter.ConversationMemberResponse:
    properties:
      avatar:
        type: string
      full_name:
        type: string
      user_id:
        type: string
      user_type:
        type: string
    type: object
  presenter.ConversationResponse:
    properties:
      avatar:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      last_message_id:
        type: string
      members:
        items:
          $ref: '#/definitions/presenter.ConversationMemberResponse'
        type: array
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  presenter.CreateConversationRequest:
    properties:
      avatar:
        type: string
      members:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        type: string
    type: object
  presenter.EmptyResponse:
    type: object
  presenter.FriendResponse:
    properties:
      created_at:
        type: string
      friend_id:
        type: string
      id:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        properties:
          avatar:
            type: string
          email:
            type: string
          full_name:
            type: string
          id:
            type: string
        type: object
      user_id:
        type: string
    type: object
  presenter.GetListConversationResponse:
    properties:
      avatar:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      last_message:
        $ref: '#/definitions/presenter.MessageResponse'
      last_message_id:
        type: string
      members:
        items:
          $ref: '#/definitions/presenter.ConversationMemberResponse'
        type: array
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  presenter.GetUserInfoResponse:
    properties:
      account_id:
        type: string
      avatar:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  presenter.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  presenter.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  presenter.MessageResponse:
    properties:
      body:
        type: string
      conversation_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      message_id:
        type: string
      reply_to:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/presenter.UserResponse'
    type: object
  presenter.RegisterRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  presenter.RegisterResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  presenter.SeenMessageRequest:
    properties:
      conversation_id:
        type: string
      message_id:
        type: string
    type: object
  presenter.SendMessageRequest:
    properties:
      body:
        type: string
      conversation_id:
        type: string
      reply_to:
        type: string
      type:
        type: string
      user_id:
        type: string
      user_online_id:
        description: for ignore user online id
        type: string
    type: object
  presenter.UploadResponse:
    properties:
      url:
        type: string
    type: object
  presenter.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_type:
        type: string
    type: object
host: localhost:8887
info:
  contact: {}
  description: This is the API documentation for Chat Socio backend service
  title: Chat Socio API
  version: "1.0"
paths:
  /auth/friend:
    get:
      consumes:
      - application/json
      description: Get list of friends
      parameters:
      - default: accepted
        description: Friend status (pending/accepted)
        in: query
        name: status
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Last ID for pagination
        in: query
        name: last_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseFriendListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Get friends
      tags:
      - friends
  /auth/friend/{friend_id}:
    delete:
      consumes:
      - application/json
      description: Remove a friend
      parameters:
      - description: Friend ID
        in: path
        name: friend_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Unfriend
      tags:
      - friends
    post:
      consumes:
      - application/json
      description: Send a friend request to another user
      parameters:
      - description: Friend ID
        in: path
        name: friend_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Send friend request
      tags:
      - friends
  /auth/friend/{friend_id}/accept:
    post:
      consumes:
      - application/json
      description: Accept a friend request
      parameters:
      - description: Friend ID
        in: path
        name: friend_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Accept friend request
      tags:
      - friends
  /auth/friend/{friend_id}/reject:
    post:
      consumes:
      - application/json
      description: Reject a friend request
      parameters:
      - description: Friend ID
        in: path
        name: friend_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Reject friend request
      tags:
      - friends
  /auth/friend/received:
    get:
      consumes:
      - application/json
      description: Get list of friend requests received by the user
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Last ID for pagination
        in: query
        name: last_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseFriendListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Get friend requests received
      tags:
      - friends
  /auth/friend/requests:
    get:
      consumes:
      - application/json
      description: Get list of pending friend requests sent by the user
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Last ID for pagination
        in: query
        name: last_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.BaseFriendListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenter.BaseEmptyResponse'
      security:
      - BearerAuth: []
      summary: Get friend requests sent
      tags:
      - friends
  /auth/user/info:
    get:
      consumes:
      - application/json
      description: Get information about the current user
      produces:
      - application/json
      responses:
        "200":
          description: User info retrieved successfully
          schema:
            $ref: '#/definitions/presenter.GetUserInfoResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Account not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get my info
      tags:
      - user
  /conversation:
    get:
      consumes:
      - application/json
      description: Get a conversation by its ID
      parameters:
      - description: Conversation ID
        in: query
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation fetched successfully
          schema:
            $ref: '#/definitions/presenter.ConversationResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get conversation by ID
      tags:
      - conversation
  /conversation/create:
    post:
      consumes:
      - application/json
      description: Create a new conversation
      parameters:
      - description: Create Conversation Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Conversation created successfully
          schema:
            $ref: '#/definitions/presenter.ConversationResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a conversation
      tags:
      - conversation
  /conversation/list:
    get:
      consumes:
      - application/json
      description: Get a list of conversations for the current user
      parameters:
      - description: Last message ID for pagination
        in: query
        name: last_message_id
        type: string
      - description: Limit number of conversations
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List conversation fetched successfully
          schema:
            items:
              $ref: '#/definitions/presenter.GetListConversationResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get list of conversations
      tags:
      - conversation
  /conversation/message:
    post:
      consumes:
      - application/json
      description: Send a message in a conversation
      parameters:
      - description: Send Message Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.SendMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent successfully
          schema:
            $ref: '#/definitions/presenter.MessageResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Send a message
      tags:
      - conversation
  /conversation/messages:
    get:
      consumes:
      - application/json
      description: Get a list of messages in a conversation
      parameters:
      - description: Conversation ID
        in: query
        name: conversation_id
        required: true
        type: string
      - description: Last message ID for pagination
        in: query
        name: last_message_id
        type: string
      - description: Limit number of messages
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List message fetched successfully
          schema:
            items:
              $ref: '#/definitions/presenter.MessageResponse'
            type: array
        "400":
          description: Conversation ID is required
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get list of messages
      tags:
      - conversation
  /conversation/seen:
    post:
      consumes:
      - application/json
      description: Mark a message as seen
      parameters:
      - description: Seen Message Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.SeenMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Seen message successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Seen message
      tags:
      - conversation
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to a bucket
      parameters:
      - description: Bucket Name
        in: formData
        name: bucket_name
        required: true
        type: string
      - description: Object Name
        in: formData
        name: object_name
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully
          schema:
            $ref: '#/definitions/presenter.UploadResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Upload a file
      tags:
      - upload
  /user/list:
    get:
      consumes:
      - application/json
      description: Get a list of users with optional keyword, limit, and last_id
      parameters:
      - description: Keyword to search
        in: query
        name: keyword
        type: string
      - description: Limit number of users
        in: query
        name: limit
        type: integer
      - description: Last user ID for pagination
        in: query
        name: last_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User list retrieved successfully
          schema:
            items:
              $ref: '#/definitions/presenter.GetUserInfoResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get list of users
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/presenter.LoginResponse'
        "400":
          description: Invalid request or validation error
          schema:
            type: string
        "404":
          description: Account not found or wrong password
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenter.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/presenter.RegisterResponse'
        "400":
          description: Invalid request or validation error
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - user
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
